#!/bin/sh -
# Copyright (c) 2015, Yannick Cote <yanick@divyan.org>. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found
# in the LICENSE file.
set -e

# Local vars -- set `project' to your project name
project=\`dcc\'
makeit=./makeit
genfrags=$makeit/fragments/generated
modfrags=$makeit/fragments/generated/modules
target=Makefile

# config generated fragment output file name
genmk=$genfrags/base.mk
mkdir -p $genfrags
mkdir -p $modfrags
:>$genmk

# defaults and compiler options
verbose=0
debug=0
compiler=
compiler_opts="musl-gcc cc gcc clang i686-w64-mingw32-gcc x86_64-w64-mingw32-gcc"



usage () {
	echo "${0##*/}: could not complete configuration"
}

# check line options
while getopts b:c:dv name; do
 case $name in
  b) builddir="$OPTARG";;
  c) compiler="$OPTARG";;
  d) debug=1;;
  v) verbose=1;;
  ?) echo "usage: ${0##*/}: [-dv] [-b builddir] [-c compiler]"
     echo "       -v build $project with verbose flags on"
     echo "       -d build $project with debug flags on"
     echo "       -b build $project in \`builddir'"
     echo "       -c build $project with \`compiler'"
     echo "\`compiler': $compiler_opts"
     exit 2;;
 esac
done



#######################################################################
# System build tool configuration and debug/verbose flags 
#######################################################################

################
# builddir
################
if [ "$builddir" = "" ]; then
	builddir=./builddir
fi
mkdir -p $builddir
touch $builddir/mergeddeps

################
# compiler
################
if [ "$compiler" = "" ]; then
	echo -n " checking: compiler... "
	for cc in $compiler_opts; do
		if $cc -E -x c /dev/null >/dev/null 2>&1; then
			compiler="$cc"
			break
		fi
	done
	if [ "$compiler" != "" ]; then
		echo $compiler
	else
		echo "not found!"
		usage
		exit 1
	fi
else
	echo " checking: compiler... $compiler"
fi

################
# host
################
echo -n " checking: host os type... "
host=
if echo | $compiler -E -dM - | grep -qs -e __unix__ -e __unix -e unix; then
	host="unix"
fi
if echo | $compiler -E -dM - | grep -qs -e _WIN32 -e _WIN64 -e __WIN32 \
	-e __WIN64 -e __WINNT -e __WINNT__ -e __WIN32__ -e WINNT -e __WIN64__ \
	-e WIN32 -e WIN64; then
	host="windows"
fi
if [ "$host" != "" ]; then
	echo $host
else
	echo "not found!"
	usage
	exit 1
fi

################
# wordsize
################
echo -n " checking: architecture word size... "
wordsize=
if echo | $compiler -E -dM - | grep -qs -e __i386 -e __i386__ -e i386; then
	wordsize=32
fi
if echo | $compiler -E -dM - | grep -qs -e __amd64 -e __amd64__ -e __x86_64 \
	-e __x86_64__; then
	wordsize=64
fi
if [ "$wordsize" != "" ]; then
	echo $wordsize
else
	echo "not found!"
	usage
	exit 1
fi

################
# verbose
################
echo " checking: verbose flag... $verbose"

################
# debug
################
echo " checking: debug flag... $debug"



#######################################################################
# Generated fragments
#######################################################################

echo " generating fragments ..."
if [ "$compiler" = "musl-gcc" ]; then
	targetprefix=""
else
	targetprefix=`echo $compiler | \
		awk -F- 'BEGIN { OFS="-"; } { $NF=""; print $0 }'`
fi

################
# verbosity
################
if [ "$verbose" = 1 ]; then
	echo "# build with verbose flag on" >> $genmk
	echo "V :=" >> $genmk
else
	echo "# silent build" >> $genmk
	echo "V := @" >> $genmk
fi
echo >> $genmk

################
# build tools
################
echo "# build location root path" >> $genmk
echo "BUILDDIR := $builddir" >> $genmk
echo >> $genmk
echo "AR := ${targetprefix}ar" >> $genmk
echo "CC := $compiler" >> $genmk
echo "LD := ${targetprefix}ld" >> $genmk
echo "RANLIB := ${targetprefix}ranlib" >> $genmk
echo "SIZE := ${targetprefix}size" >> $genmk
echo >> $genmk

################
# modules
################
modules=`cat $makeit/modules`
for m in $modules; do
	echo "CPPFLAGS += -I${m}" >> $genmk
done

$makeit/genmod.awk modfile=$makeit/modules \
	topdir=. \
	host=$host \
	verbose=$verbose \
	debug=$debug \
	mfragdir=$modfrags \
	tmpldir=$makeit/fragments



#######################################################################
# Target Makefile
#######################################################################

drawline () {
	echo >> $target
	printf "# [ Embedding file : %50s ] #\n" $1 >> $target
	echo >> $target
}

echo " building Makefile ..."

:> $target
echo "#" >> $target
echo "# Non-recursive Makefile GENERATED by \`makeit' -- `date`" >> $target
echo "# configured: $0 $*" >> $target
echo "#" >> $target

drawline $makeit/fragments/common_opts.mk
cat $makeit/fragments/common_opts.mk >> $target

if [ "$debug" != 1 ]; then
	drawline $makeit/fragments/release_opts.mk
	cat $makeit/fragments/release_opts.mk >> $target
else
	drawline $makeit/fragments/debug_opts.mk
	cat $makeit/fragments/debug_opts.mk >> $target
fi

drawline $genmk
cat $genmk >> $target

for m in $modules; do
	module=$modfrags/${m##*/}.mk
	drawline $module
	cat $module >> $target
done

drawline $makeit/fragments/Makefile.in
cat $makeit/fragments/Makefile.in >> $target



#######################################################################
# Configuration results
#######################################################################

echo -n " compiling $project with $compiler for a ${wordsize}-bit $host system"
if [ "$verbose" = 1 ]; then
	echo -n ": verbose=yes"
fi
if [ "$debug" = 1 ]; then
	echo -n ": debug=yes"
fi
echo "."

echo " Makefile ready -- type make."
